import java_cup.runtime.*;

// Kod ustawiaj�cy parser i skaner, kt�rego u�ywa.
parser code {:
	Scanner scanner;
	public Parser(Scanner scanner){
		super(scanner);
		this.scanner = scanner;
	}
	
	/* TODO: przetestowa� nadpisane metody wyrzucaj�ce b��dy wraz z wskazaniem pozycji wyst�pienia */
	/*
	
	public void report_error(String message, Object info){
		StringBuilder msg = new StringBuilder("Error");
		if(info instanceof java_cup.runtime.Symbol){
			Symbol s = (java_cup.runtime.Symbol) info;
			if(s.left >= 0){
				msg.append(" in line" + (s.left+1));
				if(s.right >= 0) msg.append(", column " + (s.right+1));
			}
		}

		m.append(" : " + message);
		System.err.println(msg);
	}
	
	public void report_fatal_error(String message, Object info){
		report_error(message, info);
		System.exit(1);
	}
	
	*/
	
:}

init with	{://scanner.init(); :};
scan with	{:return scanner.next_token(); :};

// Definicja symboli terminalnych
terminal		NEW_LINE, PLUS, MINUS, TIMES, DIVIDE, POW;
terminal		LPARENT, RPARENT;
terminal		SIN, COS, TAN, CTG;
terminal Double	NUMBER;

// Definicja symboli terminalnych
non terminal Double	expr;
non terminal		line, input;

// Priorytety dzia�a� - od najmniejszego do najwi�kszego
precedence left	PLUS, MINUS;
precedence left	TIMES, DIVIDE;
precedence left	POW;
precedence left	SIN, COS, TAN, CTG;
//precedence	LPARENT, RPARENT;

// Gramatyka

input	::=	input line
			|line
			;

line	::=	NEW_LINE {: System.out.println();:}
			| expr:e NEW_LINE {: System.out.println(e); :}
			;
			
expr	::=	NUMBER:n {: RESULT = n; :}
			| expr PLUS expr {: :}
			| expr MINUS expr {: :}
			| expr TIMES expr {: :}
			| expr DIVIDE expr {: :}
			| expr POW expr {: :}
			| LPARENT expr RPARENT {: :}
			| SIN LPARENT expr RPARENT {: :}
			| COS LPARENT expr RPARENT {: :}
			| TAN LPARENT expr RPARENT {: :} 
			| CTG LPARENT expr RPARENT {: :}
			;
			
