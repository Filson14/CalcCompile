
import java_cup.runtime.*;
import java.util.HashMap;

// Kod ustawiaj�cy parser i skaner, kt�rego u�ywa.
parser code {:
	Scanner scanner;
	Writer writer;
	HashMap<String, Double> variables = new HashMap<String, Double>();
	
	
	public Parser(Scanner scanner,Writer writer){
		super(scanner);
		this.scanner = scanner;
		this.writer = writer;
	}
	
	public void report_error(String message, Object info){
		StringBuilder msg = new StringBuilder("Error");
		if(info instanceof java_cup.runtime.Symbol){
			Symbol s = (java_cup.runtime.Symbol) info;
			if(s.left >= 0){
				msg.append(" in line " + (s.left+1));
				if(s.right >= 0) msg.append(", column " + (s.right+1));
			}
		}

		msg.append(" : " + message);
		System.err.println(msg);
	}
	
	public Writer getWriter()
	{
		return this.writer;
	}
	
	public void report_fatal_error(String message, Object info){
		report_error(message, info);
		System.exit(1);
	}
	
	public void addVariable(String key, Double value){
		variables.put(key, value);
	}
	
	public Double getVariable(String key) throws Error{
		if(variables.get(key)==null) throw new Error("Undefined variable " + key);
		return variables.get(key);
	}
:}

init with	{://scanner.init(); :};
scan with	{: return scanner.next_token(); :};
 
// Definicja symboli terminalnych
terminal		NEW_LINE, PLUS, MINUS, TIMES, DIVIDE, POW, EQ;
terminal		LPARENT, RPARENT, UMINUS;
terminal		SIN, COS, TAN, CTG;
terminal Double	NUMBER;
terminal String	ID;

// Definicja symboli nieterminalnych
non terminal Double	expr, negnum;
non terminal		line, input;

// Priorytety dzia�a� - od najmniejszego do najwi�kszego
precedence left	PLUS, MINUS;
precedence left	TIMES, DIVIDE;
precedence left UMINUS;
precedence left	POW;
precedence left	SIN, COS, TAN, CTG;
//precedence	LPARENT, RPARENT;

// Gramatyka

input	::=	input line
			|line
			;

line	::=	NEW_LINE {: :}
			| ID:var EQ expr:e NEW_LINE		{: parser.addVariable(var, e); parser.getWriter().write(var + " = " + (double) Math.round(1000 * e)/1000  + "\n"); :}	
			| expr:e NEW_LINE				{: parser.getWriter().write("=" + (double) Math.round(1000 * e)/1000  + "\n"); :}
			;

// TODO: Obs�uga niepoprawnych warto�ci dla tan i ctg
// TODO: Manewrowanie precyzj� liczby.
			
expr	::=	NUMBER:n						{: RESULT = n; :}
			| ID:var						{: RESULT = parser.getVariable(var); :}	
			| expr:e1 PLUS expr:e2			{: RESULT = e1+e2; :}
			| expr:e1 MINUS expr:e2			{: RESULT = e1-e2; :}
			| expr:e1 TIMES expr:e2			{: RESULT = e1*e2; :}
			| expr:e1 DIVIDE expr:e2		{: RESULT = e1/e2; :}
			| expr:e1 POW expr:e2			{: RESULT = Math.pow(e1,e2); :}
			| LPARENT expr:e RPARENT 		{: RESULT = e; :}
			| MINUS NUMBER:n				{: RESULT = -n; :}
			| MINUS LPARENT expr:e RPARENT	{: RESULT = -e; :}
				%prec UMINUS
			| SIN LPARENT expr:e RPARENT	{: RESULT = Math.sin(Math.toRadians(e)); :}
			| COS LPARENT expr:e RPARENT	{: RESULT = Math.cos(Math.toRadians(e)); :}
			| TAN LPARENT expr:e RPARENT	{: if((e-90)%180!=0) RESULT = Math.tan(Math.toRadians(e));
												else{throw new Error("Tan undefined");} :} 
			| CTG LPARENT expr:e RPARENT	{: if(e%180!=0)RESULT =  1/Math.tan(Math.toRadians(e));
												else throw new Error("Ctg undefined"); :}									
			;		
			